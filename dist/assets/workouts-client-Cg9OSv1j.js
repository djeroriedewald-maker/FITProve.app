import{s as o}from"./index-BZn6MCEi.js";async function _(e={}){var n;let t=o.from("workouts").select("*");if((n=e.q)!=null&&n.trim()){const s=`%${e.q.trim()}%`;t=t.or(`title.ilike.${s},description.ilike.${s}`)}e.goal&&(t=t.eq("goal",e.goal)),e.level&&(t=t.eq("level",e.level)),e.location&&(t=t.eq("location",e.location)),e.equipment==="with"&&(t=t.eq("equipment_required",!0)),e.equipment==="without"&&(t=t.eq("equipment_required",!1)),e.duration&&(t=t.eq("duration_minutes",Number(e.duration)));const{data:i,error:r}=await t.order("title",{ascending:!0});if(r)throw r;return i??[]}async function f(e){const t=o.from("workouts").select("*").eq("id",e).maybeSingle(),i=o.from("workout_blocks").select("*").eq("workout_id",e).order("sequence",{ascending:!0}),[{data:r,error:n},{data:s,error:u}]=await Promise.all([t,i]);if(n)throw n;if(!r)throw new Error("Workout niet gevonden");if(u)throw u;const c=(s??[]).map(l=>l.id);let d=[];if(c.length){const{data:l,error:a}=await o.from("workout_exercises").select("*").in("block_id",c).order("block_id",{ascending:!0}).order("sequence",{ascending:!0});if(a)throw a;d=l??[]}return{workout:r,blocks:s??[],exercises:d}}async function g(e,t){var u;let i=t;if(!i){const{data:c}=await o.auth.getUser();i=(u=c==null?void 0:c.user)==null?void 0:u.id}if(!i)throw new Error("Not authenticated");const r={workout_id:e,user_id:i,status:"active",started_at:new Date().toISOString()},{data:n,error:s}=await o.from("workout_sessions").insert(r).select("*").single();if(s)throw s;return n}async function k(e){const{data:t,error:i}=await o.from("workout_sessions").update({status:"completed",completed_at:new Date().toISOString()}).eq("id",e).select("*").single();if(i)throw i;return t}async function q(e){const{data:t,error:i}=await o.from("set_logs").select("*").eq("session_id",e).order("exercise_id",{ascending:!0}).order("set_index",{ascending:!0});if(i)throw i;return t??[]}async function m(e){const t={session_id:e.session_id,exercise_id:e.exercise_id??e.workout_exercise_id,exercise_name:e.exercise_name??null,set_index:e.set_index,reps:e.reps??null,weight_kg:e.weight_kg??null,time_seconds:e.time_seconds??e.time_sec??null,rpe:e.rpe??null,completed:e.completed??null,notes:e.notes??null},{data:i,error:r}=await o.from("set_logs").upsert(t,{onConflict:"session_id,exercise_id,set_index"}).select("*");if(r)throw r;return i}export{m as a,q as b,k as c,f as g,_ as l,g as s};
